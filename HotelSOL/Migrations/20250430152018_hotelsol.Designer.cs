// <auto-generated />
using System;
using HotelSOL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelSOL.Migrations
{
    [DbContext(typeof(HotelContext))]
    [Migration("20250430152018_hotelsol")]
    partial class hotelsol
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotelSOL.Modelo.Alojamiento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CalendarioId")
                        .HasColumnType("int");

                    b.Property<double>("PrecioBase")
                        .HasColumnType("float")
                        .HasColumnName("Precio");

                    b.Property<int>("TipoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalendarioId");

                    b.HasIndex("TipoId");

                    b.ToTable("Alojamientos");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Calendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Calendarios");
                });

            modelBuilder.Entity("HotelSOL.Modelo.DetalleFacturaServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("FacturaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("PrecioUnitario")
                        .HasColumnType("float");

                    b.Property<string>("ServicioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId");

                    b.HasIndex("ServicioId");

                    b.ToTable("DetalleFacturaServicios");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Factura", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Pagada")
                        .HasColumnType("bit");

                    b.Property<int>("ReservaId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReservaId")
                        .IsUnique();

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Habitacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<bool>("Disponibilidad")
                        .HasColumnType("bit");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PrecioBase")
                        .HasColumnType("float")
                        .HasColumnName("Precio");

                    b.Property<int>("TipoHabitacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoHabitacionId");

                    b.ToTable("Habitaciones");
                });

            modelBuilder.Entity("HotelSOL.Modelo.HistoricoEstancia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("FacturaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime2");

                    b.Property<int>("HabitacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FacturaId");

                    b.HasIndex("HabitacionId");

                    b.ToTable("HistoricoEstancias");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlojamientoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CalendarioId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoReservaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlojamientoId");

                    b.HasIndex("CalendarioId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("TipoReservaId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("HotelSOL.Modelo.ReservaHabitacion", b =>
                {
                    b.Property<int>("ReservaId")
                        .HasColumnType("int");

                    b.Property<int>("HabitacionId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Noches")
                        .HasColumnType("int");

                    b.Property<double>("PrecioPorNoche")
                        .HasColumnType("float");

                    b.HasKey("ReservaId", "HabitacionId");

                    b.HasIndex("HabitacionId");

                    b.ToTable("ReservaHabitaciones");
                });

            modelBuilder.Entity("HotelSOL.Modelo.ReservaServicio", b =>
                {
                    b.Property<int>("ReservaId")
                        .HasColumnType("int");

                    b.Property<string>("ServicioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("PrecioUnitario")
                        .HasColumnType("float");

                    b.HasKey("ReservaId", "ServicioId");

                    b.HasIndex("ServicioId");

                    b.ToTable("ReservaServicios");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Servicio", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Temporada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("FactorPrecio")
                        .HasColumnType("float");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoTemporadaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoTemporadaId");

                    b.ToTable("Temporadas");
                });

            modelBuilder.Entity("HotelSOL.Modelo.TipoAlojamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoAlojamientos");
                });

            modelBuilder.Entity("HotelSOL.Modelo.TipoHabitacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoHabitaciones");
                });

            modelBuilder.Entity("HotelSOL.Modelo.TipoReserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoReservas");
                });

            modelBuilder.Entity("HotelSOL.Modelo.TipoTemporada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoTemporadas");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Movil")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HotelSOL.Modelo.Cliente", b =>
                {
                    b.HasBaseType("HotelSOL.Modelo.Usuario");

                    b.Property<bool>("EsVIP")
                        .HasColumnType("bit");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("HotelSOL.Modelo.Recepcionista", b =>
                {
                    b.HasBaseType("HotelSOL.Modelo.Usuario");

                    b.ToTable("Recepcionistas", (string)null);
                });

            modelBuilder.Entity("HotelSOL.Modelo.Administrador", b =>
                {
                    b.HasBaseType("HotelSOL.Modelo.Recepcionista");

                    b.ToTable("Administradores", (string)null);
                });

            modelBuilder.Entity("HotelSOL.Modelo.Alojamiento", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Calendario", null)
                        .WithMany("Alojamientos")
                        .HasForeignKey("CalendarioId");

                    b.HasOne("HotelSOL.Modelo.TipoAlojamiento", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("HotelSOL.Modelo.DetalleFacturaServicio", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Factura", "Factura")
                        .WithMany("Detalles")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelSOL.Modelo.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factura");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Factura", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Reserva", "Reserva")
                        .WithOne("Factura")
                        .HasForeignKey("HotelSOL.Modelo.Factura", "ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Habitacion", b =>
                {
                    b.HasOne("HotelSOL.Modelo.TipoHabitacion", "TipoHabitacion")
                        .WithMany()
                        .HasForeignKey("TipoHabitacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoHabitacion");
                });

            modelBuilder.Entity("HotelSOL.Modelo.HistoricoEstancia", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelSOL.Modelo.Factura", "Factura")
                        .WithMany()
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelSOL.Modelo.Habitacion", "Habitacion")
                        .WithMany()
                        .HasForeignKey("HabitacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Factura");

                    b.Navigation("Habitacion");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Reserva", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Alojamiento", "Alojamiento")
                        .WithMany("Reservas")
                        .HasForeignKey("AlojamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelSOL.Modelo.Calendario", "Calendario")
                        .WithMany("Eventos")
                        .HasForeignKey("CalendarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelSOL.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelSOL.Modelo.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelSOL.Modelo.TipoReserva", "TipoReserva")
                        .WithMany()
                        .HasForeignKey("TipoReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alojamiento");

                    b.Navigation("Calendario");

                    b.Navigation("Cliente");

                    b.Navigation("Estado");

                    b.Navigation("TipoReserva");
                });

            modelBuilder.Entity("HotelSOL.Modelo.ReservaHabitacion", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Habitacion", "Habitacion")
                        .WithMany("ReservaHabitaciones")
                        .HasForeignKey("HabitacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelSOL.Modelo.Reserva", "Reserva")
                        .WithMany("ReservaHabitaciones")
                        .HasForeignKey("ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habitacion");

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("HotelSOL.Modelo.ReservaServicio", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Reserva", "Reserva")
                        .WithMany("Servicios")
                        .HasForeignKey("ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelSOL.Modelo.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Temporada", b =>
                {
                    b.HasOne("HotelSOL.Modelo.TipoTemporada", "TipoTemporada")
                        .WithMany()
                        .HasForeignKey("TipoTemporadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoTemporada");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Cliente", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Usuario", null)
                        .WithOne()
                        .HasForeignKey("HotelSOL.Modelo.Cliente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelSOL.Modelo.Recepcionista", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Usuario", null)
                        .WithOne()
                        .HasForeignKey("HotelSOL.Modelo.Recepcionista", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelSOL.Modelo.Administrador", b =>
                {
                    b.HasOne("HotelSOL.Modelo.Recepcionista", null)
                        .WithOne()
                        .HasForeignKey("HotelSOL.Modelo.Administrador", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelSOL.Modelo.Alojamiento", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Calendario", b =>
                {
                    b.Navigation("Alojamientos");

                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Factura", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Habitacion", b =>
                {
                    b.Navigation("ReservaHabitaciones");
                });

            modelBuilder.Entity("HotelSOL.Modelo.Reserva", b =>
                {
                    b.Navigation("Factura")
                        .IsRequired();

                    b.Navigation("ReservaHabitaciones");

                    b.Navigation("Servicios");
                });
#pragma warning restore 612, 618
        }
    }
}
